<template>
  <view class="pageBox">
    <!-- #ifdef APP-NVUE -->
    <tw-videon
      ref="videoGroup"
      @lodData="loadingData"
      @refreshData="refreshData"
      :autoplay="autoplay"
      :nextPlay="nextPlay"
      :loopPlay="loopPlay"
      :swId="swId"
      @doubleClick="doubleClick"
      @longpress="longpress"
    ></tw-videon>
    <!-- #endif -->

    <!-- #ifndef APP-NVUE -->
    <tw-videov
      ref="videoGroup"
      @lodData="loadingData"
      @refreshData="refreshData"
      :autoplay="autoplay"
      :nextPlay="nextPlay"
      :loopPlay="loopPlay"
      :swId="swId"
      @doubleClick="doubleClick"
      @longpress="longpress"
    ></tw-videov>
    <!-- #endif -->

    <text class="automatic" @click="openAutomatic">{{
      nextPlay ? '关闭自动播放' : '开启自动播放'
    }}</text>
  </view>
</template>
<script>
/*
 * nvue 可引用两个版本做兼容
 */
// #ifdef APP-NVUE
import twVideon from '@/src/components/tsp-video/tsp-video-list/video-n copy.nvue'
// #endif

// #ifndef APP-NVUE
import twVideov from '@/src/components/tsp-video/tsp-video-list/video-v.vue'
// #endif

export default {
  components: {
    // #ifdef APP-NVUE
    twVideon,
    // #endif

    // #ifndef APP-NVUE
    twVideov,
    // #endif
  },
  props: {
    /* 多个tab视频时需传入不同的类型id */
    swId: {
      type: String,
      default: '',
    },
    /* 当前tabsPage的下标 */
    pageIndex: {
      type: Number,
      default: 0,
    },
    /* 当前tab栏下标 */
    tabIndex: {
      type: Number,
      default: 0,
    },
    /* 当前tab栏数据 */
    tabItem: {
      type: Object,
      default: () => {},
    },
  },
  data() {
    return {
      videoData: [],
      vodList: [],
      bookName: '',
      loading: false,
      autoplay: true, //初始加载完成是否自动播放
      nextPlay: true, //是否开启自动播放
      loopPlay: false, //是否循环播放
    }
  },
  onLoad(options) {
    console.log('options', options)

    // 获取传入的书名参数
    this.bookName = options.bookName || ''
    // #ifdef H5
    this.autoplay = false
    // #endif
    this.initVod()
  },
  onShow() {
    /* 播放视频 */
    if (this.$refs.videoGroup) {
      this.$refs.videoGroup.showPlay()
      this.$refs.videoGroup.muteVideo(false) //取消视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
    }
  },
  onHide() {
    /* 暂停视频 */
    if (this.$refs.videoGroup) {
      this.$refs.videoGroup.hidePause()
      this.$refs.videoGroup.muteVideo(true) //视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
    }
  },
  onUnload() {
    /* 页面卸载时销毁视频上下文 */
    if (this.$refs.videoGroup) {
      this.$refs.videoGroup.destroyAllVideos()
    }
  },
  watch: {
    tabIndex(val) {
      //tab栏切换监听操作
      this.$nextTick(() => {
        if (this.$refs.videoGroup) {
          if (val != this.pageIndex) {
            //tab视频并不在当前视频页
            this.$refs.videoGroup.muteVideo(true) //视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
          } else {
            this.$refs.videoGroup.muteVideo(false) //取消视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
          }
        }
      })
    },
  },
  methods: {
    /* 获取视频数据 */
    async fetchVodList() {
      // 如果已经有数据，则不再重复请求
      if (this.vodList.length > 0) return

      this.loading = true
      try {
        const res = await uni.request({
          url: `https://cj.rycjapi.com/api.php/provide/vod?ac=videolist&wd=${decodeURIComponent(
            this.bookName
          )}`,
          method: 'GET',
        })
        console.log('res', res)
        if (res.data?.list?.length) {
          // 解析分集
          const vod = res.data.list[0]

          // 获取线路分隔符，如果vod_play_note为空，则默认使用'$$$'
          const lineDelimiter = vod.vod_play_note || '$$$'
          const playFroms = vod.vod_play_from.split(lineDelimiter)
          const playUrlsByLine = vod.vod_play_url.split(lineDelimiter)

          let selectedPlayUrl = ''
          // 尝试根据vod_play_from选择线路，默认选择第一个
          if (playFroms.length > 0 && playUrlsByLine.length > 0) {
            // 假设我们总是选择第一个线路，或者可以根据用户偏好/线路质量进行选择
            selectedPlayUrl = playUrlsByLine[0]
          } else {
            // 如果没有多线路信息，直接使用原始vod_play_url
            selectedPlayUrl = vod.vod_play_url
          }

          const newEpisodes = selectedPlayUrl.split('#').map((item, index) => {
            const [title, url] = item.split('$')
            return {
              id: index,
              title: title,
              vodUrl: url,
              src: url,
              coverImg: vod.vod_pic,
              // #ifdef APP-NVUE
              coverShow: false, //是否显示视频封面，vue 小程序端不播放会显示视频，可以不用显示封面，App不播放不会显示视频，就需要封面了
              // #endif
              // #ifndef APP-NVUE
              coverShow: false, //是否显示视频封面，vue 小程序端不播放会显示视频，可以不用显示封面，App不播放不会显示视频，就需要封面了
              // #endif
              object_fit: 'cover', //视频的显示类型
              sliderShow: true, //是否显示进度条
              rotateImgShow: true, //是否显示旋转头像
              fabulousShow: false, //是否点赞
              followReally: false, //是否已经关注
              // 额外的用户信息（可以根据需要添加）
              userInfo: {
                name: vod.vod_name,
                avatar: vod.vod_pic,
              },
            }
          })
          console.log('解析后的 newEpisodes 长度:', newEpisodes.length)
          console.log('newEpisodes:', newEpisodes)

          this.vodList = newEpisodes
          this.videoData = newEpisodes
        }
      } catch (error) {
        console.error('获取视频列表失败:', error)
      } finally {
        this.loading = false
      }
    },

    startData() {
      /* 返回处理后的视频数据 */
      return new Promise((resolve, reject) => {
        if (this.videoData.length > 0) {
          resolve(this.videoData)
        } else {
          // 如果没有数据，先获取数据
          this.fetchVodList()
            .then(() => {
              resolve(this.videoData)
            })
            .catch(reject)
        }
      })
    },

    /* 初始加载视频 */
    initVod() {
      this.startData().then((res) => {
        if (res.length > 0) {
          /* 调用视频的初始方法 */
          this.$refs.videoGroup.initVod(res, 0) //0是播放的下标（默认播放下标是0）
        }
      })
    },

    /* 下拉刷新 */
    refreshData() {
      console.log('下拉刷新，最外层')

      /* 重新获取数据 */
      this.vodList = []
      this.videoData = []
      this.fetchVodList().then(() => {
        if (this.videoData.length > 0) {
          /* 调用视频的重新加载方法 */
          setTimeout(() => {
            if (this.swId && this.tabIndex != this.pageIndex) {
              //tab视频刷新后并不在当前视频页，关闭自动播放
              this.autoplay = false
            } else {
              this.autoplay = true
            }
            this.$refs.videoGroup.refreshSquare(this.videoData) //0是播放的下标（默认播放下标是0）
          }, 2000)
        }
      })
    },

    /* 上拉加载 */
    loadingData() {
      console.log('上拉加载，最外层')
      /* 这里可以实现分页加载更多数据 */
      // 由于当前接口返回的是单个视频的所有集数，暂时返回空数组
      // 如果需要加载更多，可以请求不同的关键词或实现分页逻辑
      this.$refs.videoGroup.lodingData([])
    },

    /* 双击当前视频回调 */
    doubleClick(event) {
      // console.log('双击',event)
    },

    /* 长按当前视频回调 */
    longpress(event) {
      // console.log('长按',event)
    },

    /* 是否开启自动播放 */
    openAutomatic() {
      this.nextPlay = !this.nextPlay
      this.loopPlay = this.nextPlay ? false : true
    },

    /* tabVideo onShow 播放视频 */
    assemblyOnShow() {
      if (this.$refs.videoGroup) {
        this.$refs.videoGroup.showPlay()
        this.$refs.videoGroup.muteVideo(false) //取消视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
      }
    },

    /* tabVideo onHide 暂停视频 */
    assemblyOnHide() {
      if (this.$refs.videoGroup) {
        this.$refs.videoGroup.hidePause()
        this.$refs.videoGroup.muteVideo(true) //视频播放设置为静音，解决切换到其他页面后因为网络问题还在有声音播放
      }
    },

    /* tabVideo进度条滑动事件 */
    appVodTouchmoveSlider(event) {
      this.$refs.videoGroup.touchmoveSlider(event)
    },

    /* tabVideo进度条滑动结束事件 */
    appVodTouchendSlider(event) {
      this.$refs.videoGroup.touchendSlider(event)
    },
  },
}
</script>
<style>
.pageBox {
  /* #ifndef APP-NVUE */
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /* #endif */
  background-color: #000000;
  flex: 1;
}
.automatic {
  position: absolute;
  /* #ifndef APP-NVUE */
  z-index: 20;
  /* #endif */
  top: 150rpx;
  left: 50rpx;
  font-size: 32rpx;
  color: blue;
}
</style>
