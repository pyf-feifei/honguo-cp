<template>
  <view class="popup-container" @click="closePopup">
    <view class="popup-content" @click.stop>
      <view class="header">
        <text class="header-title">选集</text>
      </view>
      <scroll-view class="scroll-view" scroll-y="true" show-scrollbar="true">
        <!-- 有数据时显示列表 -->
        <view class="vod-list" v-if="localVodList.length > 0">
          <view
            v-for="(vod, index) in localVodList"
            :key="index"
            :class="[
              'vod-item',
              { 'vod-item-active': currentItemIndex === index },
            ]"
            @click="handleVodClick(vod, index)"
          >
            <text
              :class="[
                'vod-index',
                { 'vod-text-active': currentItemIndex === index },
              ]"
            >
              {{ index + 1 }}
            </text>
            <text
              :class="[
                'vod-title',
                { 'vod-text-active': currentItemIndex === index },
              ]"
            >
              {{ vod.title }}
            </text>
          </view>
        </view>
        <!-- 无数据时显示空状态 -->
        <view v-else class="empty-container">
          <image
            class="empty-image"
            src="/static/empty.png"
            mode="aspectFit"
          ></image>
          <text class="empty-text">暂无数据</text>
        </view>
      </scroll-view>
    </view>
  </view>
</template>
<script setup>
import { ref, onMounted } from 'vue'

// 使用 ref 来存储接收到的数据
const localVodList = ref([])
const currentItem = ref(null)
const currentIdx = ref(0)

const currentItemIndex = ref(null)

onMounted(() => {
  // 监听来自父页面的消息
  uni.$on('vodList', (e) => {
    console.log('收到数据：', e) // 打印完整的 e 对象
    if (e && e.data) {
      localVodList.value = Array.isArray(e.data) ? e.data : []
      currentItem.value = e.item
      currentIdx.value = e.idx
      currentItemIndex.value = e.itemIndex
    }
  })
})

// 添加点击处理函数
const handleVodClick = (vod, index) => {
  uni.$emit('commentPopup-selected', {
    vod,
    index,
  })
}

// This function will be called to close the subNVue
const closePopup = () => {
  const currentWebview = uni.getCurrentSubNVue()
  currentWebview.hide('auto')
}
</script>
<style scoped>
.popup-container {
  flex: 1;
  background-color: rgba(0, 0, 0, 0);
}

.popup-content {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ffffff;
  border-top-left-radius: 24rpx;
  border-top-right-radius: 24rpx;
  padding: 30rpx;
  flex-direction: column;
  height: 800rpx;
}

.header {
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding-bottom: 20rpx;
  border-bottom-width: 1rpx;
  border-bottom-color: #eee;
  border-bottom-style: solid;
}

.header-title {
  font-size: 32rpx;
  color: #333;
  font-weight: bold;
}

.scroll-view {
  flex: 1; /* 让滚动区域占满剩余空间 */
}

.vod-list {
  margin-top: 20rpx;
  flex-direction: row;
  flex-wrap: wrap;
  padding-bottom: 30rpx; /* 底部添加一些padding，避免内容被遮挡 */
}

.vod-item {
  width: 92rpx;
  height: 92rpx;
  margin: 10rpx;
  background-color: #f5f5f5;
  border-radius: 8rpx;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  border-width: 1rpx;
  border-style: solid;
  border-color: transparent;
}

.vod-item-active {
  background-color: #cb4a5a; /* 选中时的背景色 */
  border-color: #cb4a5a; /* 选中时的边框色 */
}

.vod-index {
  font-size: 28rpx;
  color: #333;
  font-weight: bold;
}

.vod-title {
  font-size: 22rpx;
  color: #666;
  margin-top: 4rpx;
}

.vod-text-active {
  color: #ffffff; /* 选中时的文字颜色 */
}

.empty-container {
  flex: 1;
  align-items: center;
  justify-content: center;
  padding-top: 60rpx;
}

.empty-image {
  width: 200rpx;
  height: 200rpx;
}

.empty-text {
  margin-top: 20rpx;
  font-size: 28rpx;
  color: #999999;
}
</style>
