<template>
  <view
    class="video-wrapper"
    @click="onWrapperClick"
    :style="{
      width: videoStyle.width + 'px',
      height: videoStyle.height + 'px',
    }"
  >
    <video
      :id="item.id"
      :src="item.url"
      :poster="posterUrl"
      :controls="false"
      :show-center-play-btn="false"
      :autoplay="isPlay"
      :loop="loop"
      object-fit="contain"
      @play="onPlay"
      @pause="onPause"
      @ended="onEnded"
      @error="onError"
      @timeupdate="onTimeUpdate"
      @click.stop="onVideoClick"
      @waiting="onWaiting"
      class="video-player"
      :style="{
        width: videoStyle.width + 'px',
        height: videoStyle.height + 'px',
      }"
      play-strategy="2"
    ></video>

    <!-- Custom Controls -->
    <view class="controls-overlay" @click.stop="onWrapperClick">
      <view class="loading-view" v-if="isLoading" @click.stop="onWrapperClick">
        <text class="loading-text">加载中...</text>
      </view>

      <view
        class="pause-icon-view"
        v-if="!isPlaying && !isLoading"
        @click.stop="onWrapperClick"
      >
        <text class="pause-icon">▶</text>
      </view>

      <!-- 播放时的暂停提示，点击后显示 -->
      <view
        class="play-overlay"
        v-if="isPlaying && showPlayOverlay"
        @click.stop
      >
        <text class="play-overlay-icon">⏸</text>
      </view>

      <view class="bottom-controls" @click.stop>
        <CustomSlider
          class="custom-slider-full"
          :min="0"
          :max="duration"
          :value="currentTime"
          :step="1"
          :disabled="false"
          activeColor="#ffffff"
          backgroundColor="rgba(255,255,255,0.3)"
          :blockSize="20"
          blockColor="#ffffff"
          :showValue="false"
          @changing="onSliderChanging"
          @change="onSliderChange"
        />
      </view>
    </view>
  </view>
</template>

<script>
import CustomSlider from '../CustomSlider/index.nvue'

export default {
  name: 'BaseVideo',
  components: {
    CustomSlider,
  },
  props: {
    item: {
      type: Object,
      required: true,
    },
    isPlay: {
      type: Boolean,
      default: false,
    },
    videoStyle: {
      type: Object,
      required: true,
    },
    loop: {
      type: Boolean,
      default: true,
    },
  },
  data() {
    return {
      videoContext: null,
      isPlaying: false,
      isLoading: true,
      posterUrl: '',
      duration: 0,
      currentTime: 0,
      isDragging: false,
      wasPlayingBeforeDrag: false,
      showPlayOverlay: false,
      overlayTimer: null,
    }
  },
  watch: {
    isPlay(newVal) {
      if (this.isDragging) return
      if (newVal) {
        this.play()
      } else {
        this.pause()
      }
    },
  },
  mounted() {
    this.videoContext = uni.createVideoContext(this.item.id, this)
    this.posterUrl = this.item.poster || ''
    if (this.isPlay) {
      this.play()
    }
  },
  beforeDestroy() {
    if (this.overlayTimer) {
      clearTimeout(this.overlayTimer)
    }
  },
  methods: {
    onWrapperClick(e) {
      if (this.isDragging) return

      const currentPlayingState = this.isPlaying
      if (currentPlayingState) {
        this.pause()
      } else {
        this.play()
      }

      // 显示操作反馈
      this.showOperationFeedback()
    },
    onVideoClick(e) {
      this.onWrapperClick(e)
    },
    onWaiting() {
      this.isLoading = true
    },
    showOperationFeedback() {
      // 清除之前的定时器
      if (this.overlayTimer) {
        clearTimeout(this.overlayTimer)
      }

      // 播放时点击显示暂停图标
      if (this.isPlaying) {
        this.showPlayOverlay = true
        this.overlayTimer = setTimeout(() => {
          this.showPlayOverlay = false
        }, 0)
      } else {
        // 暂停时会显示播放图标，不需要额外操作
        this.showPlayOverlay = false
      }
    },
    play() {
      if (this.videoContext) {
        this.isLoading = true // 显式设置为加载中
        this.videoContext.play()
        // 播放后，状态将在onPlay或onTimeUpdate中更新
      }
    },
    pause() {
      if (this.videoContext) {
        this.videoContext.pause()
        // 手动设置状态以确保及时更新
        setTimeout(() => {
          if (this.isPlaying) {
            this.isPlaying = false
          }
        }, 0)
      }
    },
    onPlay() {
      this.isPlaying = true
      this.isLoading = false
    },
    onPause() {
      this.isPlaying = false
    },
    onEnded() {
      this.isPlaying = false
      this.$emit('ended')
    },
    onError(e) {
      console.error(`视频[${this.item.id}]播放错误:`, e.detail.errMsg)
      this.isLoading = false
    },
    onTimeUpdate(e) {
      if (this.isDragging) return
      this.isLoading = false
      // Ensure values are numbers to prevent prop type errors
      this.currentTime = Number(e.detail.currentTime)
      this.duration = Number(e.detail.duration)
    },
    onSliderChanging(e) {
      // 拖动过程中触发，e.detail = {value: value}
      if (!this.isDragging) {
        this.isDragging = true
        this.wasPlayingBeforeDrag = this.isPlaying
        if (this.isPlaying) {
          this.pause()
        }
      }
      this.currentTime = e.value
    },
    onSliderChange(e) {
      // 完成一次拖动后触发，e.detail = {value: value} 或 e = {value: value}
      const newValue = e.value !== undefined ? e.value : e.detail?.value
      console.log(
        'Slider change:',
        newValue,
        'Video context:',
        this.videoContext
      )

      this.currentTime = newValue
      if (this.videoContext) {
        this.videoContext.seek(this.currentTime)
        console.log('Video seeked to:', this.currentTime)
      }

      if (this.wasPlayingBeforeDrag) {
        setTimeout(() => {
          this.play()
        }, 0)
      }

      this.isDragging = false
    },
  },
}
</script>

<style scoped>
.video-wrapper {
  flex: 1;
  position: relative;
}
.video-player {
  width: 100%;
  height: 100%;
}
.controls-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.loading-view {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /* background-color: rgba(0, 0, 0, 0.5); */
  justify-content: center;
  align-items: center;
}
.loading-text {
  color: #fff;
  font-size: 28rpx;
}
.pause-icon-view {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  justify-content: center;
  align-items: center;
}
.pause-icon {
  font-size: 100rpx;
  color: rgba(255, 255, 255, 0.8);
}
.play-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  justify-content: center;
  align-items: center;
  /* background-color: rgba(0, 0, 0, 0.2); */
}
.play-overlay-icon {
  font-size: 80rpx;
  color: rgba(255, 255, 255, 0.9);
}
.bottom-controls {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding-left: 20rpx;
  padding-right: 20rpx;
  flex-direction: row;
}
.custom-slider-full {
  width: 100%;
  flex: 1;
}
</style>
