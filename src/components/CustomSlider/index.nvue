<template>
  <view
    class="slider-container"
    @touchstart.stop="onTouchStart"
    @touchmove.stop="onTouchMove"
    @touchend.stop="onTouchEnd"
  >
    <view class="progress-track" :class="{ dragging: isDragging }" ref="track">
      <view class="progress-current" ref="progressCurrent"></view>
      <view
        class="progress-handle"
        :class="{ dragging: isDragging }"
        ref="progressHandle"
      >
        <view v-if="showValue" class="value-display">
          {{ Math.round(currentValue) }}
        </view>
      </view>
    </view>
  </view>
</template>

<script>
const animation = uni.requireNativePlugin('animation')
const dom = uni.requireNativePlugin('dom')

export default {
  name: 'CustomSlider',
  props: {
    // 最小值
    min: {
      type: Number,
      default: 0,
    },
    // 最大值
    max: {
      type: Number,
      default: 100,
    },
    // 步长，取值必须大于 0，并且可被(max - min)整除
    step: {
      type: Number,
      default: 1,
    },
    // 是否禁用
    disabled: {
      type: Boolean,
      default: false,
    },
    // 当前取值
    value: {
      type: Number,
      default: 0,
    },
    // 已选择的颜色
    activeColor: {
      type: String,
      default: '#007aff',
    },
    // 背景条的颜色
    backgroundColor: {
      type: String,
      default: '#e9e9e9',
    },
    // 滑块的大小，取值范围为 12 - 28
    blockSize: {
      type: Number,
      default: 28,
    },
    // 滑块的颜色
    blockColor: {
      type: String,
      default: '#ffffff',
    },
    // 是否显示当前 value
    showValue: {
      type: Boolean,
      default: false,
    },
  },
  data() {
    return {
      isDragging: false,
      trackWidth: 0,
      trackLeft: 0,
      currentValue: this.value,
    }
  },
  computed: {
    // 进度百分比
    percentage() {
      if (this.max <= this.min) return 0
      const val = Math.max(this.min, Math.min(this.max, this.currentValue))
      return (val - this.min) / (this.max - this.min)
    },
  },
  watch: {
    value(newVal) {
      this.currentValue = newVal
      if (!this.isDragging) {
        this.updateProgressUI()
      }
    },
  },
  mounted() {
    this.$nextTick(() => {
      setTimeout(() => {
        this.getTrackInfo()
      }, 100)
    })
  },
  methods: {
    getTrackInfo() {
      dom.getComponentRect(this.$refs.track, (res) => {
        if (res.size) {
          this.trackWidth = res.size.width
          this.trackLeft = res.size.left
          this.updateProgressUI()
        }
      })
    },
    updateProgressUI() {
      if (this.trackWidth === 0) return

      const progressCurrentRef = this.$refs.progressCurrent
      const progressHandleRef = this.$refs.progressHandle

      const width = this.trackWidth * this.percentage
      const handleSize = 20 // 固定20rpx
      const handlePosition = width - handleSize / 2

      if (progressCurrentRef) {
        animation.transition(progressCurrentRef, {
          styles: {
            width: `${width}px`,
          },
          duration: this.isDragging ? 0 : 100,
        })
      }

      if (progressHandleRef) {
        animation.transition(progressHandleRef, {
          styles: {
            transform: `translateX(${Math.max(
              0,
              Math.min(this.trackWidth - handleSize, handlePosition)
            )}px)`,
          },
          duration: this.isDragging ? 0 : 100,
        })
      }
    },
    onTouchStart(e) {
      if (this.disabled) return
      this.isDragging = true
      this.updateValueFromTouch(e)
    },
    onTouchMove(e) {
      if (!this.isDragging || this.disabled) return
      this.updateValueFromTouch(e)
    },
    onTouchEnd(e) {
      if (!this.isDragging || this.disabled) return
      this.isDragging = false
      // 发出change事件，表示完成一次拖动
      this.$emit('change', { value: this.currentValue })
    },
    updateValueFromTouch(e) {
      if (this.trackWidth === 0) return

      const x = e.touches[0].pageX - this.trackLeft
      let progress = x / this.trackWidth
      progress = Math.max(0, Math.min(1, progress))

      let newValue = this.min + progress * (this.max - this.min)

      // 按步长对齐
      if (this.step > 0) {
        const steps = Math.round((newValue - this.min) / this.step)
        newValue = this.min + steps * this.step
      }

      // 确保在范围内
      newValue = Math.max(this.min, Math.min(this.max, newValue))

      this.currentValue = newValue
      this.updateProgressUI()

      // 发出changing事件，表示拖动过程中
      this.$emit('changing', { value: newValue })
    },
  },
}
</script>

<style scoped>
.slider-container {
  width: 100%;
  height: 40px;
  justify-content: center;
  align-items: center;
  flex-direction: row;
  flex: 1;
}

.progress-track {
  position: relative;
  width: 100%;
  height: 6rpx;
  background-color: rgba(255, 255, 255, 0.3);
  border-radius: 3rpx;
  transition: height 0.2s;
  flex: 1;
}

.progress-track.dragging {
  height: 16rpx;
  border-radius: 8rpx;
}

.progress-current {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 0;
  background-color: rgba(255, 255, 255, 0.8);
  border-radius: 3rpx;
}

.progress-handle {
  position: absolute;
  top: 50%;
  left: 0;
  width: 20rpx;
  height: 20rpx;
  background-color: #ffffff;
  border-radius: 50%;
  transform: translateY(-50%) translateX(0px);
  border: 1rpx solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.2);
  z-index: 2;
  transition: all 0.2s;
}

.progress-handle.dragging {
  width: 30rpx;
  height: 30rpx;
  border-radius: 50%;
}

.value-display {
  background-color: rgba(0, 0, 0, 0.8);
  color: #fff;
  font-size: 12px;
  padding: 2px 6px;
  border-radius: 4px;
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  white-space: nowrap;
  z-index: 10;
}
</style>
